<?xml version="1.0" encoding="UTF-8"?>
<?page id="bugger_mod"?>
<zk>
<zscript src="../rwglobal/rwglobaldefs.zs" />
<zscript>
<![CDATA[
MYTITLE = "Admin bugger";
MYVERSION = "v0.1";
MYPANEL = "BUGGERmm";
/*
Title		: bugger for admin - test out stuff
Written by	: Victor Wong

Revisions:
*/
/*
import java.util.*;
import java.text.*;
import java.lang.Float;
import groovy.sql.Sql;
import org.zkoss.zk.ui.*;
import org.zkoss.zk.zutl.*;
*/

/*
import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
//import com.lowagie.text.html.HtmlWriter;
import com.lowagie.text.pdf.PdfContentByte;
import com.lowagie.text.pdf.Barcode39;
*/
/*
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Image;
import com.itextpdf.text.pdf.*;
import com.itextpdf.text.*;
*/

import java.util.*;
import java.text.*;
import java.awt.*;
import java.awt.image.*;
import java.awt.geom.*;
import org.apache.pdfbox.pdmodel.*;
import org.apache.pdfbox.pdmodel.font.*;
import org.apache.pdfbox.pdmodel.edit.*;
import java.io.*;
import org.zkoss.image.*;
import javax.imageio.ImageIO;

import com.google.gdata.client.calendar.*;
import com.google.gdata.data.calendar.*;
import com.google.gdata.data.calendar.*;
import com.google.gdata.util.*;

import java.net.*;

import java.sql.*;

import java.util.regex.*;

import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.parser.PdfReaderContentParser;
import com.itextpdf.text.pdf.parser.SimpleTextExtractionStrategy;
import com.itextpdf.text.pdf.parser.TextExtractionStrategy;


import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import net.ucanaccess.converters.TypesMap.AccessType;
import net.ucanaccess.ext.FunctionType;
import net.ucanaccess.jdbc.UcanaccessConnection;
import net.ucanaccess.jdbc.UcanaccessDriver;

import com.healthmarketscience.jackcess.*;

import org.victor.*;

sechand = new SecurityFuncs();

myincludeid = Executions.getCurrent().getParameter("myid");
useraccessobj = sechand.getUserAccessObject();
if(useraccessobj == null) Executions.sendRedirect(MAINLOGIN_PAGE);

kiboo = new Generals(); sqlhand = new SqlFuncs(); lbhand = new ListboxHandler();
guihand = new GuiFuncs(); luhand = new LookupFuncs();

void testMysql()
{
	Class.forName("com.mysql.jdbc.Driver");
	Connection connection = null;
	connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/wfmdb","root", "dell");
	alert(connection);
	connection.close();
}

void testme()
{
	alert(butt.getDraggable());
}

void showdropme()
{
	alert("asdf");
}

amapcount = 1;

class mimgdrop implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(org.zkoss.zk.ui.event.Event event) throws UiException
	{
		imgmap = event.getTarget();
		sx = event.getX();
		sy = event.getY();

		toltip = "mapi: " + amapcount.toString();
		amapcount++;
		Graphics2D g2d = ibufimg.createGraphics();
		g2d.setColor(new Color(250,250,250));
		g2d.drawRect(sx,sy,100,20);
		g2d.drawString(imgmap.getId(),sx+5,sy+13);
		imgmap.setContent(ibufimg);
/*
		karea = new org.zkoss.zul.Area();
		ex = sx + 100; ey = sy + 20;
		cord = sx.toString() + "," + sy.toString() + "," + ex.toString() + "," + ey.toString();
		toltip = "mapi: " + amapcount.toString();
		karea.setShape("rect");
		karea.setCoords(cord);
		karea.setTooltiptext( toltip );
		karea.setParent(imgmap);
*/
		//imgmap.addEventListener("onClick", imgdropme);
		//alert(event.getTarget().getId() + " x=" + event.getX() + " y=" + event.getY() + " cords: " + cord);
	}
}
imgdropme = new mimgdrop();

org.zkoss.zul.Imagemap kamage = null;
BufferedImage ibufimg = null;

void imgthing()
{
	kfn = session.getWebApp().getRealPath("rwimg/355078.jpg");
	globAimage = new AImage(kfn);
	InputStream in = new ByteArrayInputStream( globAimage.getByteData() );
	ibufimg = new BufferedImage(globAimage.getWidth(),globAimage.getHeight(), BufferedImage.TYPE_INT_RGB);
	ibufimg = ImageIO.read(in);

	kamage = new org.zkoss.zul.Imagemap();
	//kamage.setContent(globRackImage_f);
	kamage.setParent(frogholder);
	kamage.setId("frogmap");
	kamage.setDroppable("true");
	//kamage.addEventListener("onClick", imgdropme);

	//kamage.setWidth("800px");
	kamage.setContent(ibufimg);
}

void testDBF()
{
	Class.forName("jstels.jdbc.dbf.DBFDriver2");
	Connection conn = DriverManager.getConnection("jdbc:jstels:dbf:/home/victor/Desktop/cosomos/");
	alert(conn);
	conn.close();

//kfn = session.getWebApp().getRealPath("tmp/BALSET.DBF");
/*	kfn = "/home/victor/Desktop/cosomos/FRGLBR_wk.DBF";
	DBF dbf = new DBF(kfn, DBF.READ_ONLY);
	kk = "";
	for (int f = 1; f <= dbf.getFieldCount(); ++f)
	{
		Field fld = dbf.getField(f);
		kk += "Field " + f  
				+ ": " + fld.getName() 
				+ ", type=" + fld.getType()
				+ ", len=" + fld.getLength();
	}
	for (int i = 1; i <= dbf.getRecordCount(); i++)	{
		dbf.read();
		System.out.println("Record " + i);
		for (int f = 1; f <= dbf.getFieldCount(); ++f) {
			Field fld = dbf.getField(f);
			System.out.println(fld.getName() 
					+ "= >" + fld.get() + "<");
		}
	}				
	alert(kk);
	dbf.close();
*/
}

void doregex(String istring, String ipattern)
{
	//String mydata = wowow.getValue();
	//mypatt = ipattern.getValue();
	// Pattern pattern = Pattern.compile("([NAM])([0-9][0-9][0-9][0-9][0-9][0-9]?[0-9])");
	// "Issue To(.*?)PO No"
	Pattern pattern = Pattern.compile(ipattern);
	Matcher matcher = pattern.matcher(istring);
	if(matcher.find()) resul.setValue(resul.getValue() + "\n" + matcher.group(1).trim());
	else resul.setValue("Nada...");
}

void procInvoicePDF()
{
	ifn = session.getWebApp().getRealPath("tmp/taxinvoices/RWI_15628-AMBANGWIRA.pdf");
	PdfReader reader = new PdfReader(ifn);
	PdfReaderContentParser parser = new PdfReaderContentParser(reader);
	//PrintWriter out = new PrintWriter(new FileOutputStream(txt));
	TextExtractionStrategy strategy;
	StringBuffer buff = new StringBuffer();  
	for (int i = 1; i <= reader.getNumberOfPages(); i++)
	{
		strategy = parser.processContent(i, new SimpleTextExtractionStrategy());
		buff.append(strategy.getResultantText()); 
		//alert(strategy.getResultantText());
	}
	//out.flush();
	//out.close();
	reader.close();
	//alert(buff.toString());
	tis = buff.toString(); //.replaceAll("\n","  ");
	thestring.setValue(tis);
	doregex(tis,"(.*?)\nEmail:");
	doregex(tis,"Issue To: (.*?)\n");
	doregex(tis,"Invoice No.: (.*?)\n");
	doregex(tis,"Date: (.*?)\n");

/*
	Pattern pattern = Pattern.compile("Issue To(.*?)PO No");
	Matcher matcher = pattern.matcher(buff.toString());
	// "(\\[)(.*?)(\\])");
	// Issue To: AMALGAMATED INDUSTRIAL STEEL BERHAD PO No
	listMatches = new ArrayList();
	while(matcher.find())
	{
		listMatches.add(matcher.group(1).trim());
	}

	ks = "";
	for(String s : listMatches)
	{
		ks += s + "::";
	}
	alert(ks);
*/
}

moduleCounter = 1;

void loadExternal()
{
	newid = iwhat+moduleCounter.toString();
	moduleCounter++;
	//activateModule(mainPlayground,"workbox","",newid,"",useraccessobj);

	Include newinclude = new Include();
	newinclude.setId(newid);
	includepath = "http://52.74.172.88:8080/rlm/rlm/workOrderMan_v1.zul" + "?myid=" + newid; //+ "&" + uParams;
	newinclude.setSrc(includepath);
	sechand.setUserAccessObj(newinclude, useraccessobj); // securityfuncs.zs
	newinclude.setParent(externalworkbox);
}
//indexworker.zul

void relodIrframe()
{
	if(ifraholder.getFellowIfAny("thingthong") != null) thingthong.setParent(null);
	kk = new Iframe(); kk.setId("thingthong");
	//kk.setSrc("http://52.74.172.88:8080/rlm/rlm/outboundReq_v1.zul");
	kk.setSrc("http://mcpm.biz.tm:8080/rlm");
	kk.setStyle("width:99%;height:1000px");
	kk.setParent(ifraholder);
}

void testme()
{
	k = sqlhand.rws_gpSqlFirstRow("select top 1 * from data");
	alert(k);
}


class stkitemdoubelclik implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		isel = event.getTarget();
		try
		{
		} catch (Exception e) {}
	}
}
stkitem_doubclik = new stkitemdoubelclik();

class irislbselector implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		//isel = event.getReference();
		//alert(event);
		alert("tdddd");
	}
}
iris_dropdown_selector = new irislbselector();

void populateIRIS_dropdown(String pcode1, String pcode2, Listbox pcodedd)
{
	//IRIS_ALL_CODES
	
	ts = pcodedd.getItems().toArray();
	for(i=0;i<ts.length;i++) // clear any previous listitems
	{
		ts[i].setParent(null);
	}

	prfcode = pcode1 + pcode2;

	sqlstm = "select disptext,value1 from lookups " +
	"where myparent=cast((select idlookups from lookups where name='IRIS_ALL_CODES') as varchar) and " +
	"disptext like '" + prfcode + "%' " +
	"order by idlookups";

	r = sqlhand.gpSqlGetRows(sqlstm);
	String[] st = new String[2];
	for(d: r)
	{
		st[0] = kiboo.checkNullString(d.get("disptext"));
		st[1] = kiboo.checkNullString(d.get("value1"));
		lbhand.insertListItems(pcodedd,st,"false","");
	}
	try { pcodedd.setSelectedIndex(0); } catch (Exception e) {}
}

void irisCodeOnSelect(Listbox pcode1, Listbox pcode2, Listbox pddrop)
{
	c1 = lbhand.getListcellItemLabel(pcode1.getSelectedItem(),1);
	c2 = lbhand.getListcellItemLabel(pcode2.getSelectedItem(),1);
	populateIRIS_dropdown(c1,c2,pddrop);
}

/**
 * [fillupIRIS_selector description]
 * @param tcondition [description]
 * @param tcode1   AREA code
 * @param tcode2   TYPE code dropdowns
 * @param tiris_dd full code description for selection, numeric code store in lookup.value1
 * @param itype    1=init listbox only, 2=set tiris_dd by using tcode1 and tcode2
 */
void fillupIRIS_selector(Listbox tcondition, Listbox tcode1, Listbox tcode2, Listbox tiris_dd, int itype)
{
	if(itype == 1)
	{
		luhand.populateListBox_ValueSelection(tcondition,"IRIS_CONDITION_CODES",2,1);
		luhand.populateListBox_ValueSelection(tcode1,"IRIS_AREA_CODES",2,1);
		luhand.populateListBox_ValueSelection(tcode2,"IRIS_TYPE_CODES",2,1);

		irisCodeOnSelect(tcode1,tcode2,tiris_dd);
	}
}

Object[] talktimehds =
{
	new listboxHeaderWidthObj("DateTime",true,""),
	new listboxHeaderWidthObj("Extension",true,""),
	new listboxHeaderWidthObj("Person",true,""),
	new listboxHeaderWidthObj("TrunkNo",true,""),
	new listboxHeaderWidthObj("Phone",true,""),
	new listboxHeaderWidthObj("CallType",true,""),
	new listboxHeaderWidthObj("Duration",true,""),
	new listboxHeaderWidthObj("Rang",true,""),
	new listboxHeaderWidthObj("Info",true,""),
	new listboxHeaderWidthObj("Extra",true,""),
};

/**
 * Connection conn=DriverManager.getConnection("jdbc:ucanaccess://<mdb or accdb file path>",user, password); :: UCanAccess method
 * Connection conn=DriverManager.getConnection("jdbc:ucanaccess://c:/pippo.mdb");
 * File dbFile = new File(mdbfn); :: Jackcess method
 * db = DatabaseBuilder.open(dbFile);
 */
void loadTalkTimeRecords(String pCallType, String pStartdate, String pEnddate)
{
	if(pCallType.equals("ALL")) pCallType = "%";

	Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
	mdbfn = session.getWebApp().getRealPath("tmp/TTR.mdb"); // TODO hardcoded to use current mdb, make dynamic dropdown to let user select which mdb
	Connection conn = DriverManager.getConnection("jdbc:ucanaccess://" + mdbfn,"sa","");

	sqlstm = "select st.dtDateTime, st.intExt, et.varName, st.varTrunkNo, " +
	"st.varPhone, st.varCallType, st.varDuration, st.varMisscallDuration, " +
	"st.varABBRV, st.varABBRVDesc from Trx_SignalTbl st " +
	"left join Mas_ExtensionTbl et on et.intExt = st.intExt " +
	"where st.dtDateTime between #" + pStartdate + "# and #" + pEnddate + "# " +
	"and st.varCallType like '" + pCallType + "' " +
	"order by st.dtDateTime";

	st = conn.createStatement();
	rs = st.executeQuery(sqlstm);

	Listbox newlb = lbhand.makeVWListbox_Width(talktime_holder, talktimehds, "talktime_lb", 21);
	newlb.setMold("paging");

	//String[] fl = { "dtDateTime", "intExt", "varName", "varTrunkNo", "varPhone", "varCallType", "varDuration", "varMisscallDuration", "varABBRV", "varABBRVDesc" };
	ArrayList kabom = new ArrayList();

	while(rs.next())
	{
		j = rs.getMetaData().getColumnCount();
		for(i=1; i<=j; ++i)
		{
			o = rs.getObject(i);
			kabom.add(o.toString().trim());
		}
		lbhand.insertListItems(newlb,kiboo.convertArrayListToStringArray(kabom),"false","");
		kabom.clear();
	}
	conn.close();
}

void listdirfiles(String idirectory, Div iholder, String lbid)
{
	Object[] files_hd =
	{
		new listboxHeaderWidthObj("Filename",true,""),
	};

	Listbox newlb = lbhand.makeVWListbox_Width(iholder, files_hd, lbid, 1);
	newlb.setMold("select");
	File directory = new File(idirectory);
	File[] flist = directory.listFiles();
	ArrayList kabom = new ArrayList();
	for(k : flist)
	{
		if(k.isFile())
		{
			kabom.add(k.getName());
			lbhand.insertListItems(newlb,kiboo.convertArrayListToStringArray(kabom),"false","font-size:9px");
			kabom.clear();
		}
	}
}

/**
 * MS-ACCESS MDB filename filter used in listing them
 * @return
 */
FilenameFilter mdbFilter = new FilenameFilter() 
{
	public boolean accept(File file, String name)
	{
		if(name.endsWith(".mdb") || name.endsWith(".MDB")) return true;
		else return false;
	}
};

/**
 * Get files listing from directory specified by pPath. Uses filter for specified file listing
 * @param pLb     listbox to put them filenames/full-path found
 * @param pPath   full path to list them files
 * @param pFilter FilenameFilter type - see example mdbFilter. null=list all files
 */
void listDirectoryFiles(Listbox pLb, String pPath, FilenameFilter pFilter)
{
	Object[] files_hd =
	{
		new listboxHeaderWidthObj("Filename",true,""),
		new listboxHeaderWidthObj("fullpath",false,""), // hide this as listbox will be type select(drop-down)
	};

	File directory = new File(pPath);
	File[] flist = (pFilter == null) ? directory.listFiles() : directory.listFiles(pFilter);
	String[] kabom = new String[2];
	for(k : flist)
	{
		if(k.isFile())
		{
			kabom[0] = k.getName();
			kabom[1] = k.getAbsolutePath();
			lbhand.insertListItems(pLb,kabom,"false","");
		}
	}
}

void showselfile()
{
	try
	{
		ts = ttfiles_lb.getSelectedItem();
		st = lbhand.getListcellItemLabel(ts,0) + " :: " + lbhand.getListcellItemLabel(ts,1);
		alert(st);
	} catch (Exception e) {}
}

void loadIframe(int itype)
{
	switch(itype)
	{
		case 1:
			theiframe.setSrc("http://localhost:8888/rlm_d2/");
			break;
		case 2:
			theiframe.setSrc("http://localhost:8888/vlab_d/");
			break;
		case 3:
			theiframe.setSrc("http://localhost:8080/rlm_d3/index.zul?loc=1");
			break;
		case 4:
			theiframe.setSrc("http://localhost:8080/vld/index.zul?dev=1");
			break;
	}
}

]]>
</zscript>

<style src="/real-world.css" />
<style>
	.GridLayoutNoBorder tr.z-row td.z-row-inner, tr.z-row .z-cell, div.z-grid
	{
		border: none; overflow: hidden; zoom: 1;
		border-top: none; border-left: none; border-right: none; border-bottom: none;
	}
	.wbo { font-size:9px;color:#ffffff;font-weight:bold }
</style>

<?component name="tipcolor" macroURI="/macros/macrocomp1.zul" ?>

<div width="1400px">
<panel id="${MYPANEL}" title="${MYTITLE} ${MYVERSION}" border="none" collapsible="true" closable="true" >
<panelchildren style="background:#094D7F">

<hbox>
	<button label="loc_Rl" onClick="loadIframe(3)" />
	<button label="loc_Vl" onClick="loadIframe(4)" />
	<button label="Rl" onClick="loadIframe(1)" />
	<button label="Vl" onClick="loadIframe(2)" />
</hbox>

<iframe id="theiframe" style="width:1300px;height:2000px" />

<zscript>
<![CDATA[

String[] calltype_string = { "ALL","INCOMING","OUTGOING","MISSCALL" };
//lbhand.populateDropdownListbox(calltype_dd,calltype_string);
// listDirectoryFiles(ttfiles_lb, "/var/lib/tomcat7/webapps/rwmsgst_d/tmp",null);

//listdirfiles("/var/lib/tomcat7/webapps/rwmsgst_d/tmp",ttfiles_holder,"ttfiles_lb");
//fillupIRIS_selector(iris_condition,iris_code1,iris_code2,iriscode_dd,1);

/*
<tipcolor words="test macro" bstyle="background:#3FADC5" />
<button label="test me" onClick="testme()" />
<button label="Billing checker - TESTING" onClick="relodIrframe()" />
<div id="ifraholder"  />
*/

//<script src="/adminmodules/go-debug.js" />
//imgthing();

class divdropp implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(org.zkoss.zk.ui.event.Event event) throws UiException
	{
		alert(event.getTarget());
	}
}
//kamage.addEventListener("onDrop", new divdropp());

/*
<!-- <image id="frogmap" src="../rwimg/1331F960A12F-12D5.jpg" droppable="true" width="800px" /> -->
<!-- <button label="testme" onClick="testme()" /> -->
<!-- <button label="test mysql" onClick="testMysql()" /> -->
<!-- <include src="adminmodules/helloprocessing.html" /> -->
*/

/*
<button label="Proc pdf invoice" onClick="procInvoicePDF()" />

<grid width="600px">
	<rows>
		<row>
			<label value="the text" />
			<textbox id="wowow" />
		</row>
		<row>
			<label value="the pattern" />
			<textbox id="ipattern" />
		</row>
		<row spans="2">
			<button label="proc" onClick="doregex(wowow.getValue(),ipattern.getValue())" />
		</row>
		<row>
			<label id="thestring" multiline="true" />
			<label id="resul" multiline="true" />
		</row>
	</rows>
</grid>
 
 <!--
<timeline height="300px" width="100%">
    <bandinfo width="70%" id="b1" intervalUnit="month" intervalPixels="100" eventSourceUrl="data/newXMLDocument.xml">
    </bandinfo>
    <bandinfo width="30%" intervalUnit="year" intervalPixels="200" syncWith="b1" eventSourceUrl="data/newXMLDocument.xml">
    </bandinfo>
</timeline>
-->

<!--
<iframe style="width:99%;height:700px" src="http://localhost:8080/rws_d/adminmodules/helloprocessing.html" />
-->
<!--
<image id="butt" src="../rwimg/button.png" draggable="true" onDrag="showdropme()" />
<button label="testDBF" onClick="testDBF()" />
<separator height="3px" />
<div id="frogholder" droppable="true" />
-->

<!--
<hbox>
	<listbox id="ttfiles_lb" mold="select" sclass="k9" />
	<button label="dang" onClick="showselfile()" />

	<listbox id="calltype_dd" mold="select" sclass="k9" />
	<label value="From" sclass="wbo" /> <datebox id="callstart" format="yyyy-MM-dd" style="font-size:9px" onCreate="kiboo.setTodayDatebox(self)" />
	<label value="To" sclass="wbo" /> <datebox id="callend" format="yyyy-MM-dd" style="font-size:9px" onCreate="kiboo.setTodayDatebox(self)" />

	<button label="Load" sclass="k9o" onClick="loadTalkTimeRecords(calltype_dd.getSelectedItem().getLabel(), kiboo.getDateFromDatebox(callstart), kiboo.getDateFromDatebox(callend))" />
</hbox>

<div id="talktime_holder"  />
-->

<!--
	<grid width="480px">
		<rows>
			<row>
				<label id="condition_code" />
				<label id="problem_code" />
				<label id="extended_code" />
			</row>
			<row>
				<listbox id="iris_condition" mold="select" style="font-size:9px" width="130px" />
				<hbox>
					<listbox id="iris_code1" mold="select" style="font-size:9px" width="70px" onSelect="irisCodeOnSelect(self,iris_code2,iriscode_dd)" />
					<listbox id="iris_code2" mold="select" style="font-size:9px" width="70px" onSelect="irisCodeOnSelect(iris_code1,self,iriscode_dd)" />
				</hbox>
				<listbox id="iris_extended" mold="select" style="font-size:9px" width="130px" />
			</row>
			<row>
				<separator />
				<listbox id="iriscode_dd" mold="select" style="font-size:9px" width="140px" />
				<separator />
			</row>
		</rows>
	</grid>
-->

*/

]]>
</zscript>
</panelchildren>
</panel>
</div>
</zk>

