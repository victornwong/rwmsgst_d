<?xml version="1.0" encoding="UTF-8"?>
<?page id="stkobsomdo"?>
<zk>
<zscript src="../rwglobal/rwglobaldefs.zs" />
<zscript src="../rwglobal/rwsqlfuncs.zs" />
<zscript src="../rwglobal/formMaker_v1.zs" />
<zscript src="../rwglobal/systemAudit.zs" />
<zscript src="../rwglobal/uploadDocu_v1.zs" />
<zscript src="../rwglobal/fc6_CustomerSelector.zs" />
<zscript src="../rwglobal/jobNotes_funcs.zs" />
<zscript src="../rwglobal/uploadedWorksheet_v1.zs" />
<zscript src="../rwglobal/emailfuncs.zs" />
<zscript>
<![CDATA[
MYTITLE = "Provision for Stock Obsolescences processor (Rentwise ONLY)";
MYVERSION = "v0.1";
MY_ID = "stockobsowin";
/**
 * @title Stock Obsolescence worksheet processor
 * @author Victor Wong
 * @since 16/06/2015
 * @notes
 * Stock obsolescence (Development/Deployment duration 10 working days)
 * - stock-aging report generated by FOCUS to auto-calculate provision with market value
 * - pre-defined favourable and un-favourable determination. Formula =
 * AGEING_COST - MARKET_VALUE,
 * if result is <0, then it will be FAVORABLE
 * if result is >0, then it will be UN-FAVORABLE
 * if result is 0, FAVORABLE
 * Pre-requisite: market value of items - price-list updated regularly
*/
import java.util.*;
import java.text.*;
import java.io.*;
import java.lang.Float;
import groovy.sql.Sql;
import org.zkoss.zk.ui.*;
import org.zkoss.zk.zutl.*;
import java.math.BigDecimal;
import java.awt.Color;
import org.zkoss.util.media.AMedia;
import org.zkoss.zul.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.*;
import org.apache.poi.ss.util.*;
import org.victor.*;
sechand = new SecurityFuncs();
myincludeid = Executions.getCurrent().getParameter("myid");
useraccessobj = sechand.getUserAccessObject();
if(useraccessobj == null) Executions.sendRedirect(MAINLOGIN_PAGE);

kiboo = new Generals(); sqlhand = new SqlFuncs(); lbhand = new ListboxHandler();
guihand = new GuiFuncs(); luhand = new LookupFuncs(); dmshand = new DMSFuncs();
gridhand = new GridHandler(); ngfun = new NGfuncs(); rwsqlfun = new RWMS_sql();

// HARDCODED as to worksheet 07/07/2015
START_ROW = 7; // start-row 8 as per Excel worksheet
PRODNAME_COL = 1; // col B : prod-name in worksheet to search
COST_COL = 16; // col Q : cost
QTY_COL = 18; // col S : quantity
FMV_COL = 19; // col T : FMV
TOTALFMV_COL = 20; // col U : Total FMV
DIFF_COL = 21; // col V : difference of total-fmv and cost
FAVUN_COL = 29; // col AD : FAV or UNFAV

OUTPUT_FILENAME = "provstockobso.xls";

void procObsoleStock()
{
	org.apache.poi.hssf.usermodel.HSSFRow checkrow;
	Cell kcell;
	HashMap dtg = new HashMap();

	// grab market-prices into hashmap first, if nothing, no point upload worksheet
	sqlstm = "select itemname,price from rw_mktpricebook;";
	r = sqlhand.gpSqlGetRows(sqlstm);
	if(r.size() == 0)
	{
		guihand.showMessageBox("ERR: nothing in re-market pricebook, cannot progress");
		return;
	}

	for(d : r)
	{
		itm = kiboo.checkNullString(d.get("itemname")).trim();
		if(!itm.equals(""))
		{
			vl = 0.0;
			try { vl = d.get("price"); } catch (Exception e) {}

			if(!dtg.containsKey(itm))
			{
				dtg.put(itm.toUpperCase(), vl);
			}
		}
	}

	rwswk = new uploadedWorksheet();
	rwswk.getUploadFileData();
	if(rwswk.thefiledata == null)
	{
		guihand.showMessageBox("ERR: Invalid worksheet, try again");
		return;
	}

	inps = new ByteArrayInputStream(rwswk.thefiledata);	
	HSSFWorkbook excelWB = new HSSFWorkbook(inps);
	FormulaEvaluator evaluator = excelWB.getCreationHelper().createFormulaEvaluator();
	wksht0 = excelWB.getSheetAt(0);
	wknumrows = wksht0.getPhysicalNumberOfRows();

	for(i=START_ROW; i<wknumrows; i++) // iterate all rows and calc watever
	{
		try
		{
			checkrow = wksht0.getRow(i);
			pnm = "";
			try { kcell = checkrow.getCell(PRODNAME_COL); pnm = POI_GetCellContentString(kcell,evaluator,"").trim().toUpperCase(); }
			catch (Exception e) {}
			if(!pnm.equals("")) // found product-name
			{
				tcost = 0.0; // get cost from worksheet
				try { kcell = checkrow.getCell(COST_COL); tcost = Float.parseFloat(POI_GetCellContentString(kcell,evaluator,"").trim()); }
				catch (Exception e) {}

				tqty = 0; // get quantity from worksheet
				try { kcell = checkrow.getCell(QTY_COL); tqty = Integer.parseInt(POI_GetCellContentString(kcell,evaluator,"").trim()); }
				catch (Exception e) {}

				// go through market-price hashmap and try get 'em prices
				Set set = dtg.entrySet();
				Iterator itr = set.iterator();
				ifmv = itotalfmv = 0.0;

				while(itr.hasNext())
				{
					Map.Entry thisEntry = (Map.Entry)itr.next();
					ikey = thisEntry.getKey().toUpperCase();
					ifmv = thisEntry.getValue();

					if(pnm.indexOf(ikey) != -1) // match product-name against re-market item
					{
						itotalfmv = tqty * ifmv;
						break;
					}
				}

				idiff = tcost - itotalfmv;
				ifavstr = (idiff <= 0) ? "FAVORABLE" : "UNFAVORABLE";

				// put 'em values into worksheet
				excelInsertString(wksht0,i,FAVUN_COL,ifavstr); // fav/un string
				excelInsertNumber(wksht0,i,FMV_COL,ifmv.toString()); // FMV value from hashmap
				excelInsertNumber(wksht0,i,TOTALFMV_COL,itotalfmv.toString()); // total FMV
				excelInsertNumber(wksht0,i,DIFF_COL,idiff.toString()); // Difference of cost and total-fmv
			}
		} catch (Exception e) {}
	}
	outfn = session.getWebApp().getRealPath("tmp/" + OUTPUT_FILENAME);
	FileOutputStream fileOut = new FileOutputStream(outfn);
	excelWB.write(fileOut);
	fileOut.close();
	downloadFile(kasiexport,OUTPUT_FILENAME,outfn);
}

/**
 * [runMarketPrice_window description]
 */
void runMarketPrice_window()
{
	guihand.globalActivateWindow(mainPlayground,"miscwindows","rws_sales/marketPricebook_v1.zul",kiboo.makeRandomId("vmp"),"",useraccessobj);
}


]]>
</zscript>

<style src="/real-world.css" />
<style>
	.GridLayoutNoBorder tr.z-row td.z-row-inner, tr.z-row .z-cell, div.z-grid
	{
		border: none; overflow: hidden; zoom: 1;
		border-top: none; border-left: none; border-right: none; border-bottom: none;
	}
</style>

<window id="${MY_ID}" width="500px" title="${MYTITLE} ${MYVERSION}" position="center" mode="overlapped" border="normal" closable="true" >
<div style="background:#F5311C;padding:3px">
	<vbox>
		<button label="Upload and process stock obsolescence worksheet" onClick="procObsoleStock()" />
		<button label="Re-market price list" onClick="runMarketPrice_window()" />
		<separator height="3px"/>
		<label multiline="true" sclass="k9mo" >
Uses re-market prices database to process the stock obsolescence worksheet.
Update the re-market prices regularly to improve accuracy
Processing will take a while. Sit tight..
		</label>
	</vbox>
	<div id="kasiexport" visible="false" />
</div>

<zscript>
<![CDATA[

]]>
</zscript>
</window>
</zk>