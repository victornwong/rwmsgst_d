<?xml version="1.0" encoding="UTF-8"?>
<?page id="mktpricebokpg"?>
<zk>
<zscript src="../rwglobal/rwglobaldefs.zs" />
<zscript src="../rwglobal/rwsqlfuncs.zs" />
<zscript src="../rwglobal/formMaker_v1.zs" />
<zscript src="../rwglobal/systemAudit.zs" />
<zscript src="../rwglobal/uploadDocu_v1.zs" />
<zscript src="../rwglobal/fc6_CustomerSelector.zs" />
<zscript src="../rwglobal/jobNotes_funcs.zs" />
<zscript src="../rwglobal/uploadedWorksheet_v1.zs" />
<zscript src="../rwglobal/emailfuncs.zs" />
<zscript>
<![CDATA[
MYTITLE = "Market Pricebook (Rentwise ONLY)";
MYVERSION = "v0.1";
MY_ID = "mktpricbokpenl";
/**
 * @title Market price-book management for Rentwise ONLY
 * @author Victor Wong
 * @since 11/06/2015
 * @notes
*/
import java.util.*;
import java.text.*;
import org.victor.*;
sechand = new SecurityFuncs();
myincludeid = Executions.getCurrent().getParameter("myid");
useraccessobj = sechand.getUserAccessObject();
if(useraccessobj == null) Executions.sendRedirect(MAINLOGIN_PAGE);

kiboo = new Generals(); sqlhand = new SqlFuncs(); lbhand = new ListboxHandler();
guihand = new GuiFuncs(); luhand = new LookupFuncs(); dmshand = new DMSFuncs();
gridhand = new GridHandler(); ngfun = new NGfuncs(); rwsqlfun = new RWMS_sql();

last_list_type = 0;
newitem_tbs = glob_sel_mktlistitem = null;
glob_sel_mktitem = "";

Object[] mktitemslb_hds =
{
	new listboxHeaderWidthObj("REC",true,"50px"),
	new listboxHeaderWidthObj("Dated",true,""),
	new listboxHeaderWidthObj("User",true,""),
	new listboxHeaderWidthObj("Item",true,""),
	new listboxHeaderWidthObj("Desc",true,""),
	new listboxHeaderWidthObj("Cat",true,""),
	new listboxHeaderWidthObj("Type",true,""),
	new listboxHeaderWidthObj("Price",true,""),
	new listboxHeaderWidthObj("StdDev",true,""),
	new listboxHeaderWidthObj("LastUpd",true,""),
	new listboxHeaderWidthObj("LastUser",true,""),
};

class mktlbdcliker implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		glob_sel_mktlistitem = event.getTarget();
		if(glob_sel_pvitem_listitem != null)
		{
			glob_sel_mktitem = lbhand.getListcellItemLabel(glob_sel_mktlistitem,0);
			alert(glob_sel_mktitem);
/*
			for(i=0;i<5;i++) // fill-up textbox from selected listbox item's column
			{
				kk = lbhand.getListcellItemLabel(glob_sel_mktlistitem, i+2);
				uptbs[i].setValue(kk);
			}
			upditem_pop.open(glob_sel_mktlistitem);
*/
		}
	}
}
mktitemdclicker = new mktlbdcliker();

/**
 * [listMktPriceItems description]
 * @param itype list type,
 * @param istb search text box
 */
void listMktPriceItems(int itype, Object istb)
{
	last_list_type = itype;
	st = (istb != null) ? kiboo.replaceSingleQuotes(istb.getValue().trim()) : "";
	Listbox newlb = lbhand.makeVWListbox_Width(mktitems_holder, mktitemslb_hds, "mktitems_lb", 20);

	sqlstm = "select * from rw_mktpricebook ";

	r = sqlhand.gpSqlGetRows(sqlstm);
	if(r.size() == 0) return;
	newlb.setMold("paging"); newlb.setMultiple(true); newlb.setCheckmark(true);
	//newlb.addEventListener("onSelect", pvlbonclicker );
	ArrayList kabom = new ArrayList();
	String[] fl = { "origid", "datecreated", "username", "itemname", "description", "category", "eqtype", "price", "sdeviation", "lastupdate", "lastupdateuser" };
	for(d : r)
	{
		ngfun.popuListitems_Data(kabom,fl,d);
		//supdeld = kiboo.checkNullDate(dpi.get("sup_actual_deldate"),"");
		//stt = kiboo.checkNullString(dpi.get("pr_status"));
		lbhand.insertListItems(newlb,kiboo.convertArrayListToStringArray(kabom),"false","");
		kabom.clear();
	}
	lbhand.setDoubleClick_ListItems(newlb,mktitemdclicker);
}

void mktItemFunc(String itype)
{
	todaydate =  kiboo.todayISODateTimeString();
	sqlstm = msgtext = "";
	refresh = errflag = false;
	unm = useraccessobj.username;

	if(itype.equals("newitem_b")) // insert new item into rw_mktpricebook
	{
		// n_itemname, n_description, n_eqtype, n_category, n_price, n_sdeviation
		Object[] newitem_tbs = { n_itemname, n_description, n_eqtype, n_category, n_price, n_sdeviation }; // new-item popup input boxes
		dt = ngfun.getString_fromUI(newitem_tbs);
		dt[0] = (dt[0].equals("")) ? "NEW ITEM" : dt[0];
		dt[1] = (dt[1].equals("")) ? "NEW DESCRIPTION" : dt[1];
		dt[2] = (dt[2].equals("")) ? "UNDEF_TYPE" : dt[2];
		dt[3] = (dt[3].equals("")) ? "UNDEF_CAT" : dt[3];
		try { kk = Float.parseFloat(dt[4]); dt[4] = kk.toString(); } catch (Exception e) { dt[4] = "0"; }
		try { kk = Float.parseFloat(dt[5]); dt[5] = kk.toString(); } catch (Exception e) { dt[5] = "0"; }

		sqlstm = "insert into rw_mktpricebook (itemname,description,eqtype,category,price,sdeviation,datecreated,username,active) values " +
		"('" + dt[0] + "','" + dt[1] + "','" + dt[2] + "','" + dt[3] + "'," + dt[4] + "," + dt[5] + ",'" + todaydate + "','" + unm + "',1);";
	}

	if(itype.equals("clrnewitem_b")) // clear all input boxes in newitem_pop
	{
		for(i=0;i<newitem_tbs.length;i++)
		{
			newitem_tbs[i].setValue("");
		}
	}

	if(itype.equals("delitem_b")) // delete selected items
	{
		if(lbhand.check_ListboxExist_SelectItem(mktitems_holder, "mktitems_lb"))
		{
			if(Messagebox.show("Hard delete the selected items", "Are you sure?",
				Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) != Messagebox.YES) return;

			oids = "";
			kx = mktitems_lb.getSelectedItems().toArray();

			for(i=0; i<kx.length; i++)
			{
				oids = lbhand.getListcellItemLabel(kx[i],0) + ",";
			}
			try { oids = oids.substring(0,oids.length()-1); } catch (Exception e) {}

			if(!oids.equals(""))
			{
				sqlstm = "delete from rw_mktpricebook where origid"
			}
		}
	}

	if(!sqlstm.equals(""))
	{
		sqlhand.gpSqlExecuter(sqlstm);
		listMktPriceItems(last_list_type,null);
	}
	//if(!lgstr.equals("")) add_RWAuditLog(EMAILINVOICE_PREFIX,"",lgstr,useraccessobj.username); // inject audit-log if not empty string
	if(!msgtext.equals("")) guihand.showMessageBox(msgtext);
}

]]>
</zscript>

<style src="/real-world.css" />
<style>
	.GridLayoutNoBorder tr.z-row td.z-row-inner, tr.z-row .z-cell, div.z-grid
	{
		border: none; overflow: hidden; zoom: 1;
		border-top: none; border-left: none; border-right: none; border-bottom: none;
	}
</style>

<window id="${MY_ID}" width="900px" height="600px" title="${MYTITLE} ${MYVERSION}" position="center" mode="overlapped" border="normal" closable="true">

<popup id="newitem_pop">
	<div sclass="shadowbox" style="background:#ACD244;" >
		<grid sclass="GridLayoutNoBorder">
			<rows>
				<row style="background:#ACD244;">
					<label value="Item name" sclass="k9" />
					<textbox id="n_itemname" sclass="k9" />
					<label value="Category" sclass="k9" />
					<textbox id="n_category" sclass="k9" />
				</row>
				<row style="background:#ACD244;">
					<label value="Description" sclass="k9" />
					<textbox id="n_description" sclass="k9" />
					<label value="Type" sclass="k9" />
					<textbox id="n_eqtype" sclass="k9" />
				</row>
				<row style="background:#ACD244;">
					<label value="Price" sclass="k9" />
					<textbox id="n_price" sclass="k9" />
					<label value="Std Deviation" sclass="k9" />
					<textbox id="n_sdeviation" sclass="k9" />
				</row>
			</rows>
		</grid>
		<separator height="3px" />
		<button id="newitem_b" label="Insert item" sclass="k9mo" onClick="newitem_pop.close(); mktItemFunc(self.getId())" />
		<button id="clrnewitem_b" label="Clear" sclass="k9mo" onClick="mktItemFunc(self.getId())" />
	</div>
</popup>

<div>
	<div sclass="shadowbox" style="background:#93BA56">
		<hbox>
			<label value="Search text" sclass="k9" />
			<textbox id="mktitem_search_tb" sclass="k9" />
			<button label="Load/search" sclass="k9mo" onClick="listMktPriceItems(1,mktitem_search_tb)" />
			<listbox id="category_dd" sclass="k9" mold="select" />
			<button label="by category" sclass="k9mo" />
			<listbox id="itemtype_dd" sclass="k9" mold="select" />
			<button label="by item type" sclass="k9mo" />
			<button label="Audit-log" sclass="k9" />
		</hbox>
	</div>
	<div sclass="shadowbox" style="background:#93BA56">
		<hbox>
			<button label="New item" sclass="k9mo" onClick="newitem_pop.open(self)" />
			<button id="toggitem_b" label="Toggle active" sclass="k9mo" />
			<button id="delitem_b" label="Delete" sclass="k9mo" style="color:#D12626" onClick="mktItemFunc(self.getId())" />
		</hbox>
		<separator height="3px" />
		<div id="mktitems_holder" />
	</div>
</div>

<zscript>
<![CDATA[



]]>
</zscript>

</window>
</zk>
